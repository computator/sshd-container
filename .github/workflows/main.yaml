name: Build Container
on:
  push:
    branches:
      - main
  schedule:
   - cron: 40 3 * * 0
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-24.04 # uses podman from 24.04 or later
    env:
      REGISTRY: ghcr.io
      IMAGE: ghcr.io/${{ github.repository_owner }}/sshd
      IMGCACHE_DIR: build_image_cache
    steps:
      - id: restore-cache
        uses: actions/cache/restore@v4
        with:
          # we can't precalculate the hash for a key so
          # set an invalid key and fall back to the most recent cache
          key: image-cache-INVALID
          restore-keys: image-cache-
          path: ${{ format('{0}/{1}', runner.temp, env.IMGCACHE_DIR) }}

      - name: Set podman imagestore path
        run: |
          mkdir -p $HOME/.config/containers
          cat > $HOME/.config/containers/storage.conf <<-"EOF"
            [storage]
            driver = "overlay"
            imagestore = "${{ format('{0}/{1}', runner.temp, env.IMGCACHE_DIR) }}"
          EOF
          podman system reset -f

      - name: Check for newer ssh version in apk
        # skip step if no cache was restored
        if: steps.restore-cache.outputs.cache-matched-key != ''
        continue-on-error: true
        run: |
          [ -n "$(podman run --pull never --rm -i ${{ env.IMAGE }} sh -c 'apk -q update && apk -q list -u openssh-server')" ] || exit 0
          podman image rm ${{ env.IMAGE }}
          podman image prune -f

      - env:
          USERNAME: ${{ github.actor }}
          PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: printenv PASSWORD | podman login -v ${{ env.REGISTRY }} -u "$USERNAME" --password-stdin

      - uses: actions/checkout@v4

      # TODO: switch to --pull=newer once supported https://github.com/containers/podman/issues/22845
      - run: podman build --pull=always -t ${{ env.IMAGE }} .

      - run: podman push ${{ env.IMAGE }}

      - if: ${{ !cancelled() }} # runs even if previous steps failed
        run: podman logout ${{ env.REGISTRY }}

      - uses: actions/cache/save@v4
        if: ( !endsWith(steps.restore-cache.outputs.cache-matched-key, hashFiles(format('{0}/{1}', runner.temp, env.IMGCACHE_DIR))) )
        with:
          key: image-cache-${{ hashFiles(format('{0}/{1}', runner.temp, env.IMGCACHE_DIR)) }}
          path: ${{ format('{0}/{1}', runner.temp, env.IMGCACHE_DIR) }}
